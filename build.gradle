group 'com.thirdparty'

apply plugin: 'java'
apply plugin: 'idea'

ext {
    versionRegex = '(\\d+)(\\.\\d+)*'

    jacksonVersion = "2.8.4"
}

if (!project.hasProperty('release')) {
    // Gradle has been run without option -Prelease - auto increment plugin version
    def time = System.currentTimeMillis().intdiv(1000)
    def hours = time.intdiv(3600)
    def secs = time % 3600
    version = String.format('%s.%d.%04d', version, hours, secs)
}

configurations {
    compileExport
    compile.extendsFrom compileExport
}

dependencies {
    // dependencies provided by plugin runtime
    compile project(':plugin-api')
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

    // plugin specific dependencies
    compileExport(group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "$jacksonVersion") { transitive = false }
    compileExport(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion") { transitive = false }
    compileExport(group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jacksonVersion") { transitive = false }

    testCompile project(':plugin-core')
    testCompile project(':com.fortify.plugin.runtime')
    testCompile "junit:junit:$junitVersion"
    testRuntime 'org.slf4j:slf4j-simple:1.7.21'
}


jar {
    doFirst {
        // check if version matches requirements
        if (!version.matches(versionRegex)) {
            throw new InvalidUserDataException("Plugin version '$version' does not match '$versionRegex'")
        }
    }
    // replace version placeholders in plugin.xml
    filesMatching('plugin.xml') {
        filter {
            it.replaceAll('<!--VERSION-->.*?<!--/VERSION-->', version)
        }
    }
    // include files from compileExport dependencies
    from { configurations.compileExport.collect { it.isDirectory() ? it : zipTree(it).matching { exclude 'META-INF/*' } } }
}
